services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"  # Explicitly expose the port
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - main-network
    volumes:
      - ./backend:/app/backend
    environment:
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"  # Bind to all interfaces

  db:
    image: postgres:16
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    networks:
      - main-network
    command: ["postgres", "-c", "log_statement=all", "-c", "log_connections=on"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3500:443"
    depends_on:
      - backend
    networks:
      - main-network
    volumes:
      - ./frontend:/app/frontend

  tournaments:
    build:
      context: ./service2
      dockerfile: Dockerfile
    ports:
      - "8001:8001"  # Explicitly expose the tournaments service port
    volumes:
      - ./service2:/app/service2
    depends_on:
      tournaments_db:
        condition: service_healthy
    environment:
      - DB_NAME=${TOURNAMENT_DB}
      - DB_USER=${TOURNAMENT_DB_USER}
      - DB_PASSWORD=${TOURNAMENT_DB_PASSWORD}
      - DB_HOST=${TOURNAMENT_DB_HOST}
      - DB_PORT=${TOURNAMENT_DB_PORT}
    networks:
      - tournaments-network
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8001"  # Bind to all interfaces

  tournaments_db:
    image: postgres:16
    volumes:
      - tournaments_postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${TOURNAMENT_DB}
      - POSTGRES_USER=${TOURNAMENT_DB_USER}
      - POSTGRES_PASSWORD=${TOURNAMENT_DB_PASSWORD}
    networks:
      - tournaments-network
    command: ["postgres", "-c", "log_statement=all", "-c", "log_connections=on"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${TOURNAMENT_DB_USER} -d ${TOURNAMENT_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s

volumes:
  postgres_data:
  tournaments_postgres_data:

networks:
  main-network:
    driver: bridge
  tournaments-network:
    driver: bridge